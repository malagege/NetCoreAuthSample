@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
<!-- 需要 import Microsoft.AspNetCore.Identity 才能用 signInManager -->
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@using AuthSample.Models

<!-- 注入 _signInManager -->
@inject SignInManager<ApplicationUser> _signInManager
@inject IAuthorizationService authorizationService

@{
}

<!--是否有登入帳號-->
@if (_signInManager.IsSignedIn(User))
{
    <!-- 用 Post 操作比較安全-->
    <form method="post" asp-controller="account" asp-action="logout">
        @User.Identity.Name <button>登出</button>
    </form>
}
else
{
    <div>
        <a asp-controller="account" asp-action="register">註冊</a>
    </div>
    <div>
        <a asp-controller="account" asp-action="login">登入</a>
    </div>
}


<div>
    <a asp-controller="admin" asp-action="rolelist">角色管理</a>
</div>
<div>
    <a asp-controller="admin" asp-action="userlist">使用者管理</a>
</div>
    Index


<h3>權限判斷</h3>
@if ( _signInManager.IsSignedIn(User) && User.IsInRole("Admin"))
{
    <div>
        角色 Admin 可以看到
    </div>
}
@*注意這邊 誇號是跟 await 用起來，才能用到 Succeeeded*@
@if( (await authorizationService.AuthorizeAsync(User, "EditRolePolicy")).Succeeded )
{
    <div>
        含有 EditRolePolicy 看的到
    </div>
}

@if( (await authorizationService.AuthorizeAsync(User, "AdminRolePolicy")).Succeeded )
{
    <div>
        含有 AdminRolePolicy 看的到
    </div>
}

@if( (await authorizationService.AuthorizeAsync(User, "SuperAdminPolicy")).Succeeded )
{
    <div>
        含有 SuperAdminPolicy 看的到
    </div>
}

@if( (await authorizationService.AuthorizeAsync(User, "EditRolePolicy2")).Succeeded )
{
    <div>
        含有 EditRolePolicy2 看的到
    </div>
}

@if( (await authorizationService.AuthorizeAsync(User, "EditRolePolicy3")).Succeeded )
{
    <div>
        含有 EditRolePolicy3 看的到<br>
         context.User.IsInRole("Admin") && context.User.HasClaim(claim => claim.Type == "Edit Role" && claim.Value == true.ToString()) || context.User.IsInRole("SuperManager")
    </div>
}